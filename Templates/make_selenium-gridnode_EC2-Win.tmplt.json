{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "AssignInstanceRole": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "InstanceRole" }, "" ] }
      ]
    },
    "AssignPublicIp": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "NoPublicIp" }, "true" ] }
      ]
    },
    "AssignStaticPrivateIp": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "PrivateIp" }, "" ] }
      ]
    },
    "CreateAppVolume": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "AppVolumeDevice" }, "" ] }
      ]
    },
    "ExecuteAppScript": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "AppScriptUrl" }, "" ] }
      ]
    },
    "Reboot": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "NoReboot" }, "true" ] }
      ]
    },
    "UseAdminGroups": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerAdminGroups" }, "" ] }
      ]
    },
    "UseAdminUsers": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerAdminUsers" }, "" ] } ]
    },
    "UseComputerName": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerComputerName" }, "" ] }
      ]
    },
    "UseEnvironment": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerEnvironment" }, "" ] }
      ]
    },
    "UseOuPath": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerOuPath" }, "" ] }
      ]
    },
    "UseWamConfig": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerConfig" }, "" ] }
      ]
    }
  },
  "Description": "This template deploys a STIG-hardened Windows instance to host the Selenium grid-node application.",
  "Mappings": {
    "ShellCommandMap": {
      "cmd": { "command": "cmd.exe" },
      "powershell": {
        "command": "powershell.exe -NoLogo -NoProfile -NonInteractive -ExecutionPolicy Bypass"
      }
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "EC2 Instance Configuration"
          },
          "Parameters": [
            "AmiId",
            "InstanceType",
            "InstanceRole",
            "KeyPairName",
            "NoPublicIp",
            "NoReboot",
            "NoUpdates",
            "SecurityGroupIds"
          ]
        },
        {
          "Label": {
            "default": "EC2 Watchmaker Configuration"
          },
          "Parameters": [
            "PythonInstaller",
            "PypiIndexUrl",
            "WatchmakerBootstrapper",
            "WatchmakerConfig",
            "WatchmakerEnvironment",
            "WatchmakerOuPath",
            "WatchmakerComputerName",
            "WatchmakerAdminGroups"
          ]
        },
        {
          "Label": {
            "default": "EC2 Application Configuration"
          },
          "Parameters": [
            "AppScriptUrl",
            "AppScriptParams",
            "AppScriptShell"
          ]
        },
        {
          "Label": {
            "default": "EC2 Application EBS Volume"
          },
          "Parameters": [
            "AppVolumeDevice",
            "AppVolumeSize",
            "AppVolumeType"
          ]
        },
        {
          "Label": {
            "default": "Network Configuration"
          },
          "Parameters": [
            "PrivateIp",
            "SubnetId"
          ]
        }
      ]
    }
  },
  "Outputs": {
    "SeGridNodeId": {
      "Description": "Instance ID",
      "Value": { "Ref": "SeGridNode" }
    }
  },
  "Parameters": {
    "AmiId": {
      "AllowedPattern": "^ami-[0-9a-z]{8}$|^ami-[0-9a-z]{17}$",
      "Description": "ID of the AMI to launch",
      "Type": "String"
    },
    "AppScriptParams": {
      "Description": "Parameter string to pass to the application script. Ignored if \"AppScriptUrl\" is blank",
      "Type": "String"
    },
    "AppScriptShell": {
      "AllowedValues": [
        "cmd",
        "powershell"
      ],
      "Default": "powershell",
      "Description": "Shell with which to execute the application script. Ignored if \"AppScriptUrl\" is blank",
      "Type": "String"
    },
    "AppScriptUrl": {
      "AllowedPattern": "^$|^https://s3-(.*)$",
      "ConstraintDescription": "Must use a region-based HTTPS S3 endpoint (starts with \"s3-\"), see http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region",
      "Default": "",
      "Description": "(Optional) Region-based HTTPS URL to the application script in an S3 bucket. Leave blank to launch without an application script. If specified, an appropriate \"InstanceRole\" is required",
      "Type": "String"
    },
    "AppVolumeDevice": {
      "AllowedValues": [
        "",
        "xvdf",
        "xvde",
        "xvdg",
        "xvdh",
        "xvdi"
      ],
      "Default": "",
      "Description": "(Optional) Device to mount an extra EBS volume. Leave blank to launch without an extra application volume",
      "Type": "String"
    },
    "AppVolumeSize": {
      "ConstraintDescription": "Must be between 1GB and 16384GB.",
      "Default": "1",
      "Description": "Size in GB of the EBS volume to create. Ignored if \"AppVolumeDevice\" is blank",
      "MaxValue": "16384",
      "MinValue": "1",
      "Type": "Number"
    },
    "AppVolumeType": {
      "AllowedValues": [
        "gp2",
        "io1",
        "sc1",
        "st1",
        "standard"
      ],
      "Default": "gp2",
      "Description": "Type of EBS volume to create. Ignored if \"AppVolumeDevice\" is blank",
      "Type": "String"
    },
    "BrowserFirefoxLoc": {
      "Description": "URL/Location for downloading Firefox offline-installer.",
      "Type": "String"
    },
    "BrowserChromeLoc": {
      "Description": "URL/Location for downloading Chrome offline-installer.",
      "Type": "String"
    },
    "DriverChromeLoc": {
      "Description": "URL/Location for downloading Selenium driver for the Chrome browser.",
      "Type": "String"
    },
    "DriverFirefoxLoc": {
      "Description": "URL/Location for downloading Selenium driver for the Firefox browser.",
      "Type": "String"
    },
    "DriverIeLoc": {
      "Description": "URL/Location for downloading Selenium driver for the Internet Explorer browser.",
      "Type": "String"
    },
    "InstanceRole": {
      "Default": "",
      "Description": "(Optional) IAM instance role to apply to the instance(s)",
      "Type": "String"
    },
    "InstanceType": {
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "c4.large",
        "c4.xlarge",
        "m4.large",
        "m4.xlarge"
      ],
      "Default": "t2.micro",
      "Description": "Amazon EC2 instance type",
      "Type": "String"
    },
    "KeyPairName": {
      "Description": "Public/private key pairs allow you to securely connect to your instance after it launches",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "NoPublicIp": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "true",
      "Description": "Controls whether to assign the instance a public IP. Recommended to leave at \"true\" _unless_ launching in a public subnet",
      "Type": "String"
    },
    "NoReboot": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "false",
      "Description": "Controls whether to reboot the instance as the last step of cfn-init execution",
      "Type": "String"
    },
    "NssmZipLoc": {
      "Description": "URL/Location for downloading the NSSM utility.",
      "Type": "String"
    },
    "PrivateIp": {
      "Default": "",
      "Description": "(Optional) Set a static, primary private IP. Leave blank to auto-select a free IP",
      "Type": "String"
    },
    "PypiIndexUrl": {
      "AllowedPattern": "^http[s]?://.*$",
      "Default": "https://pypi.org/simple",
      "Description": "URL to the PyPi Index",
      "Type": "String"
    },
    "PythonInstaller": {
      "AllowedPattern": "^http[s]?://.*\\.exe$",
      "Default": "https://www.python.org/ftp/python/3.6.2/python-3.6.2-amd64.exe",
      "Description": "URL to the Python Installer Executable",
      "Type": "String"
    },
    "ResourceBuckets": {
      "Description": "Comma-delimited list of buckets to pull resources from",
      "Type": "String"
    },
    "SecurityGroupIds": {
      "Description": "List of security groups to apply to the instance",
      "Type": "List<AWS::EC2::SecurityGroup::Id>"
    },
    "SeleniumJarLoc": {
      "Description": "URL/Location for downloading Selenium JAR-file.",
      "Type": "String"
    },
    "SeleniumHubUrl": {
      "AllowedPattern": "^http[s]?://.*$",
      "Description": "URL of the Hub Selenium node.",
      "Type": "String"
    },
    "ServiceTld": {
      "Default": "amazonaws.com",
      "Description": "TLD of the created EFS-endpoint.",
      "Type": "String"
    },
    "SubnetId": {
      "Description": "ID of the subnet to assign to the instance",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "WatchmakerAdminGroups": {
      "Default": "",
      "Description": "(Optional) Colon-separated list of domain groups that should have admin permissions on the EC2 instance",
      "Type": "String"
    },
    "WatchmakerAdminUsers": {
      "Default": "",
      "Description": "(Optional) Colon-separated list of domain users that should have admin permissions on the EC2 instance",
      "Type": "String"
    },
    "WatchmakerBootstrapper": {
      "AllowedPattern": "^$|^http[s]?://.*\\.ps1$",
      "Default": "https://raw.githubusercontent.com/plus3it/watchmaker/master/docs/files/bootstrap/watchmaker-bootstrap.ps1",
      "Description": "URL to the Watchmaker PowerShell bootstrapper for Windows",
      "Type": "String"
    },
    "WatchmakerComputerName": {
      "Default": "",
      "Description": "(Optional) Sets the hostname/computername within the OS",
      "Type": "String"
    },
    "WatchmakerConfig": {
      "AllowedPattern": "^$|^http[s]?://.*$",
      "Default": "",
      "Description": "(Optional) URL to a Watchmaker config file",
      "Type": "String"
    },
    "WatchmakerEnvironment": {
      "AllowedValues": [
        "",
        "dev",
        "test",
        "prod"
      ],
      "Default": "",
      "Description": "Environment in which the instance is being deployed",
      "Type": "String"
    },
    "WatchmakerOuPath": {
      "AllowedPattern": "^$|^(OU=.+,)+(DC=.+)+$",
      "Default": "",
      "Description": "(Optional) DN of the OU to place the instance when joining a domain. If blank and \"WatchmakerEnvironment\" enforces a domain join, the instance will be placed in a default container. Leave blank if not joining a domain, or if \"WatchmakerEnvironment\" is \"$false\"",
      "Type": "String"
    }
  },
  "Resources": {
    "SeGridNode": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": "1",
          "Timeout": "PT60M"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Authentication": {
          "Fn::If": [
            "AssignInstanceRole",
            {
              "Ec2IamRole": {
                "roleName": { "Ref": "InstanceRole" },
                "type": "S3"
              }
            },
            { "Ref": "AWS::NoValue" }
          ]
        },
        "AWS::CloudFormation::Init": {
          "browser-driver-installers": {
            "files": {
              "c:\\TEMP\\ChromeDriver.zip": {
                "authentication": "Ec2IamRole",
                "source": { "Ref": "DriverChromeLoc" }
              },
              "c:\\TEMP\\GeckoDriver.zip": {
                "authentication": "Ec2IamRole",
                "source": { "Ref": "DriverFirefoxLoc" }
              },
              "c:\\TEMP\\IEDriverServer.zip": {
                "authentication": "Ec2IamRole",
                "source": { "Ref": "DriverIeLoc" }
              }
            },
            "commands": {
              "1-dearchive-chrome": {
                "command": {
                  "Fn::Join": [
                    " ",
                    [
                      "powershell.exe \"Expand-Archive",
                      "-LiteralPath C:\\TEMP\\ChromeDriver.zip",
                      "-DestinationPath C:\\Selenium\""
                    ]
                  ]
                }
              },
              "2-dearchive-firefox": {
                "command": {
                  "Fn::Join": [
                    " ",
                    [
                      "powershell.exe \"Expand-Archive",
                      "-LiteralPath C:\\TEMP\\GeckoDriver.zip",
                      "-DestinationPath C:\\Selenium\""
                    ]
                  ]
                }
              },
              "3-dearchive-explorer": {
                "command": {
                  "Fn::Join": [
                    " ",
                    [
                      "powershell.exe \"Expand-Archive",
                      "-LiteralPath C:\\TEMP\\IeDriverServer.zip",
                      "-DestinationPath C:\\Selenium\""
                    ]
                  ]
                }
              }
            }
          },
          "browser-installers": {
            "files": {
              "c:\\cfn\\MSIs\\chrome-standalone.msi": {
                "authentication": "Ec2IamRole",
                "source": { "Ref": "BrowserChromeLoc" }
              },
              "c:\\cfn\\MSIs\\firefox.exe": {
                "authentication": "Ec2IamRole",
                "source": { "Ref": "BrowserFirefoxLoc" }
              }
            },
            "commands": {
              "1-install-firefox": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::FindInMap": [
                          "ShellCommandMap",
                          { "Ref": "AppScriptShell" },
                          "command"
                        ]
                      },
                      " C:\\cfn\\MSIs\\firefox.exe -ms"
                    ]
                  ]
                },
                "waitAfterCompletion": "0"
              },
              "2-install-chrome": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::FindInMap": [
                          "ShellCommandMap",
                          { "Ref": "AppScriptShell" },
                          "command"
                        ]
                      },
                      " C:\\cfn\\MSIs\\chrome-standalone.msi /quiet "
                    ]
                  ]
                },
                "waitAfterCompletion": "0"
              }
            }
          },
          "configSets": {
            "launch": [
              "setup",
              {
                "Fn::If": [
                  "ExecuteAppScript",
                  "make-app",
                  { "Ref": "AWS::NoValue" }
                ]
              },
              {
                "Fn::If": [
                  "Reboot",
                  "reboot",
                  { "Ref": "AWS::NoValue" }
                ]
              },
              "browser-installers",
              "browser-driver-installers",
              "nss-setup",
              "selenium-config",
              "finalize"
            ]
          },
          "finalize": {
            "commands": {
              "10-signal-success": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "cfn-signal.exe -e 0",
                      " --stack ",
                      { "Ref": "AWS::StackName" },
                      " --resource SeGridNode",
                      {
                        "Fn::If": [
                          "AssignInstanceRole",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --role ",
                                { "Ref": "InstanceRole" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      " --url ",
                      {
                        "Fn::Join": [
                          ".",
                          [
                            "https://cloudformation",
                            { "Ref": "AWS::Region" },
                            { "Ref": "ServiceTld" }
                          ]
                        ]
                      },
                      " --region ",
                      { "Ref": "AWS::Region" },
                      "\n"
                    ]
                  ]
                },
                "ignoreErrors": "true",
                "waitAfterCompletion": "0"
              }
            }
          },
          "make-app": {
            "commands": {
              "10-make-app": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::FindInMap": [
                          "ShellCommandMap",
                          { "Ref": "AppScriptShell" },
                          "command"
                        ]
                      },
                      " c:\\cfn\\scripts\\make-app ",
                      { "Ref": "AppScriptParams" }
                    ]
                  ]
                },
                "waitAfterCompletion": "0"
              }
            },
            "files": {
              "c:\\cfn\\scripts\\make-app": {
                "authentication": "Ec2IamRole",
                "source": { "Ref": "AppScriptUrl" }
              }
            }
          },
          "nss-setup": {
            "files": {
              "c:\\TEMP\\nssm.zip": {
                "authentication": "Ec2IamRole",
                "source": { "Ref": "NssmZipLoc" }
              }
            },
            "commands": {
              "1-dearchive-nssm": {
                "command": {
                  "Fn::Join": [
                    " ",
                    [
                      "powershell.exe \"Expand-Archive",
                      "-LiteralPath C:\\TEMP\\nssm.zip",
                      "-DestinationPath C:\\Selenium\""
                    ]
                  ]
                }
              }
            }
          },
          "reboot": {
            "commands": {
              "10-reboot": {
                "command": "powershell.exe \"Restart-Computer -Force -Verbose\"",
                "waitAfterCompletion": "forever"
              }
            }
          },
          "selenium-config": {
            "files": {
              "C:\\Selenium\\selenium-server-standalone.jar": {
                "authentication": "Ec2IamRole",
                "source": { "Ref": "SeleniumJarLoc" }
              },
              "C:\\Selenium\\selenium-setup.bat": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "nssm install SeleniumGridNode java -jar ",
                      "C:\\Selenium\\selenium-server-standalone.jar ",
                      "role -node -hub ",
                      { "Ref": "SeleniumHubUrl" },
                      "/grid/register\n",
                      "nssm start SeleniumGridNode\n"
                    ]
                  ]
                }
              }
            }
          },
          "setup": {
            "files": {
              "c:\\cfn\\cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      { "Ref": "AWS::StackId" },
                      "\n",
                      "region=",
                      { "Ref": "AWS::Region" },
                      "\n",
                      "url=",
                      {
                        "Fn::Join": [
                          ".",
                          [
                            "https://cloudformation",
                            { "Ref": "AWS::Region" },
                            { "Ref": "ServiceTld" }
                          ]
                        ]
                      },
                      "interval=1",
                      "\n",
                      "verbose=true",
                      "\n"
                    ]
                  ]
                }
              },
              "c:\\cfn\\scripts\\watchmaker-install.ps1": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "$BootstrapUrl = \"",
                      { "Ref": "WatchmakerBootstrapper" },
                      "\"\n",
                      "$PythonUrl = \"",
                      { "Ref": "PythonInstaller" },
                      "\"\n",
                      "$PypiUrl = \"",
                      { "Ref": "PypiIndexUrl" },
                      "\"\n\n",
                      "# Get the host\n",
                      "$PypiHost=\"$(([System.Uri]$PypiUrl).Host)\"\n\n",
                      "# Download bootstrap file\n",
                      "$BootstrapFile = \"${Env:Temp}\\$(${BootstrapUrl}.split('/')[-1])\"\n",
                      "(New-Object System.Net.WebClient).DownloadFile(\"$BootstrapUrl\", \"$BootstrapFile\")\n\n",
                      "# Install python\n",
                      "& \"$BootstrapFile\" -PythonUrl \"$PythonUrl\" -Verbose -ErrorAction Stop\n\n",
                      "# Install watchmaker\n",
                      "pip install --index-url=\"$PypiUrl\" --trusted-host=\"$PypiHost\" --upgrade pip setuptools watchmaker\n\n"
                    ]
                  ]
                }
              }
            },
            "services": {
              "windows": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "c:\\cfn\\cfn-hup.conf"
                  ]
                }
              }
            }
          },
          "watchmaker-launch": {
            "commands": {
              "10-watchmaker-launch": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::FindInMap": [
                          "ShellCommandMap",
                          "powershell",
                          "command"
                        ]
                      },
                      " \"& {",
                      " c:\\cfn\\scripts\\watchmaker-install.ps1;",
                      " watchmaker --log-level debug",
                      " --log-dir C:\\Watchmaker\\Logs",
                      " --no-reboot",
                      {
                        "Fn::If": [
                          "UseWamConfig",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --config \\\"",
                                { "Ref": "WatchmakerConfig" },
                                "\\\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseEnvironment",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --env \\\"",
                                { "Ref": "WatchmakerEnvironment" },
                                "\\\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseOuPath",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --ou-path \\\"",
                                { "Ref": "WatchmakerOuPath" },
                                "\\\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseComputerName",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --computer-name \"",
                                { "Ref": "WatchmakerComputerName" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseAdminGroups",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --admin-groups \\\"",
                                { "Ref": "WatchmakerAdminGroups" },
                                "\\\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseAdminUsers",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --admin-users \"",
                                { "Ref": "WatchmakerAdminUsers" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      " }\""
                    ]
                  ]
                }
              }
            }
          },
          "watchmaker-update": {
            "commands": {
              "10-watchmaker-update": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::FindInMap": [
                          "ShellCommandMap",
                          "powershell",
                          "command"
                        ]
                      },
                      " \"& {",
                      " c:\\cfn\\scripts\\watchmaker-install.ps1;",
                      " watchmaker --log-level debug",
                      " --log-dir C:\\Watchmaker\\Logs",
                      " --salt-states None",
                      " --no-reboot",
                      {
                        "Fn::If": [
                          "UseWamConfig",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --config \\\"",
                                { "Ref": "WatchmakerConfig" },
                                "\\\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseEnvironment",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --env \\\"",
                                { "Ref": "WatchmakerEnvironment" },
                                "\\\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseOuPath",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --ou-path \\\"",
                                { "Ref": "WatchmakerOuPath" },
                                "\\\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseComputerName",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --computer-name \"",
                                { "Ref": "WatchmakerComputerName" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseAdminGroups",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --admin-groups \\\"",
                                { "Ref": "WatchmakerAdminGroups" },
                                "\\\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseAdminUsers",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --admin-users \"",
                                { "Ref": "WatchmakerAdminUsers" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      " }\""
                    ]
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "DeleteOnTermination": "true",
              "VolumeType": "gp2"
            }
          },
          {
            "Fn::If": [
              "CreateAppVolume",
              {
                "DeviceName": { "Ref": "AppVolumeDevice" },
                "Ebs": {
                  "DeleteOnTermination": "true",
                  "VolumeSize": { "Ref": "AppVolumeSize" },
                  "VolumeType": { "Ref": "AppVolumeType" }
                }
              },
              { "Ref": "AWS::NoValue" }
            ]
          }
        ],
        "IamInstanceProfile": {
          "Fn::If": [
            "AssignInstanceRole",
            { "Ref": "InstanceRole" },
            { "Ref": "AWS::NoValue" }
          ]
        },
        "ImageId": { "Ref": "AmiId" },
        "InstanceType": { "Ref": "InstanceType" },
        "KeyName": { "Ref": "KeyPairName" },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": {
              "Fn::If": [
                "AssignPublicIp",
                "true",
                "false"
              ]
            },
            "DeviceIndex": "0",
            "GroupSet": { "Ref": "SecurityGroupIds" },
            "PrivateIpAddress": {
              "Fn::If": [
                "AssignStaticPrivateIp",
                { "Ref": "PrivateIp" },
                { "Ref": "AWS::NoValue" }
              ]
            },
            "SubnetId": { "Ref": "SubnetId" }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  { "Ref": "AWS::StackName" }
                ]
              ]
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "<script>",
                "\n",
                "cfn-init.exe -v -c launch",
                " --stack ",
                { "Ref": "AWS::StackName" },
                " --resource SeGridNode ",
                " --url ",
                {
                  "Fn::Join": [
                    ".",
                    [
                      "https://cloudformation",
                      { "Ref": "AWS::Region" },
                      { "Ref": "ServiceTld" }
                    ]
                  ]
                },
                " --region ",
                { "Ref": "AWS::Region" },
                "\n",
                "if %ERRORLEVEL% equ 0 goto success\n\n",
                ":error\n",
                "cfn-signal.exe -e 1",
                " --stack ",
                { "Ref": "AWS::StackName" },
                " --resource SeGridNode ",
                " --url ",
                {
                  "Fn::Join": [
                    ".",
                    [
                      "https://cloudformation",
                      { "Ref": "AWS::Region" },
                      { "Ref": "ServiceTld" }
                    ]
                  ]
                },
                " --region ",
                { "Ref": "AWS::Region" },
                "\n",
                "echo \"ERROR: cfn-init failed! Aborting!\"",
                "\n",
                "exit /b 1\n\n",
                ":success\n",
                "</script>"
              ]
            ]
          }
        }
      },
      "Type": "AWS::EC2::Instance"
    }
  }
}
